{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)667553cd-d738-4a7f-b621-964481790992","ParentGuid":"(Guid)00000000-0000-0000-0000-000000000000","Name":"(string)FB_ValueIsIntegerMultiple","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)24568a24-c491-472c-a21f-ee5d33859fab","@Value":{"@Type":"24568a24","@Value":{"MemoryReserveForOnlineChange":"(int)0","ExcludeFromBuild":"(bool)False","External":"(bool)False","EnableSystemCall":"(bool)False","CompilerDefines":"(string)","LinkAlways":"(bool)False","Undefines":{"@Type":"[string]","@Value":[]}}}},{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)21af5390-2942-461a-bf89-951aaf6999f1","@Value":"(Guid)c733db44-193b-4f2a-91c4-57ad7a4c37dd"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"24568a24":"{24568a24-c491-472c-a21f-ee5d33859fab}","2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","bool":"System.Boolean","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","int":"System.Int32","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)IF In_bEnable THEN\n\t// Ist der \"rZu_pruefender_Wert_in\" ein ganzzahliges Vielfaches von \"rDivisor_in\", wird der Ausgang\n\t// \"bGanzzahliges_Vielfaches_out\" ausgegeben.\n\t// Beispiel:\t\"rDivisor_in\" ist 80.0 und somit wird der Ausgang \"bGanzzahliges_Vielfaches_out\" bei\n\t// \t\t\t\trZu_pruefender_Wert_in = 80.0, 160.0, 240.0, 320, also n*80.0 ausgegeben\n\trDifference := F_lrRound((In_rValueToCheck / In_rDivisor), 2);\n\tOut_uiBeforeCommaPart := DINT_TO_UINT(TRUNC(rDifference));\t\t\t\t\t\t\t\t\t// Vorkomma-Teil der Differenz: Nachkomma abschneiden\n\tOut_rAfterCommaPart := F_lrRound((rDifference - UINT_TO_REAL(Out_uiBeforeCommaPart)), 2);\t// Nachkomma-Teil der Differenz = Differenz - Vorkomma-Teil\n\t\n\trtrigAfterCommaPartIsNull(CLK:= (Out_rAfterCommaPart = 0.000));\t\t\t\t\t// Steigende Flanke \"Nachkomma-Wert ist gleich 0000\"\n\t\n\t// Wenn Schmierimpuls = 80, 160, 240, 320,...800 dann Zyklus inkrementieren\n\tIF (rDifference > 0.0)\n\t\tAND rtrigAfterCommaPartIsNull.Q THEN\n\t\tOut_bIsIntegerMultiple := TRUE;\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Zu prüfender Wert ist ein ganzzahliges Vielfaches\n\tELSE\n\t\tOut_bIsIntegerMultiple := FALSE;\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Zu prüfender Wert ist ein ganzzahliges Vielfaches\n\tEND_IF\t\nELSE\n\tOut_bIsIntegerMultiple := FALSE;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Zu prüfender Wert ist ein ganzzahliges Vielfaches\n\tOut_uiBeforeCommaPart := 0;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Vorkomma-Teil der Differenz: Nachkomma abschneiden\n\tOut_rAfterCommaPart := 0.0;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Nachkomma-Teil der Differenz = Differenz - Vorkomma-Teil\nEND_IF","LineInfoPersistence":"(string)667553cd-d738-4a7f-b621-964481790992_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string){attribute 'qualified_only' := ''}\n{attribute 'namespace' := 'ILGStdLib.FunctionBlocks'}\nFUNCTION_BLOCK FB_ValueIsIntegerMultiple\nVAR_OUTPUT\n\t/// Zu prüfender Wert ist ein ganzzahliges Vielfaches\n\tOut_bIsIntegerMultiple: BOOL;\n\t/// Vorkomma-Teil der Differenz: Nachkomma abschneiden\n\tOut_uiBeforeCommaPart: UINT;\n\t/// Nachkomma-Teil der Differenz = Differenz - Vorkomma-Teil\n\tOut_rAfterCommaPart: REAL;\nEND_VAR\nVAR\n\t/// Differenz: rZu_pruefender_Wert_in / rDivisor_in\n\trDifference: REAL;\n\t/// Steigende Flanke \"Nachkomma-Teil ist gleich 0000\"\n\trtrigAfterCommaPartIsNull: R_TRIG;\nEND_VAR\nVAR_INPUT\n\t/// Bausteinbearbeitung, wenn TRUE\n\tIn_bEnable: BOOL;\n\t/// Wert, der auf Ganzzahliges Vielfaches geprüft werden soll (Real-Wert mit EINER Nachkommastelle)\n\tIn_rValueToCheck: REAL;\n\t/// Divisor (Nenner), durch den der \"rZu_pruefender_Wert_in\" geteilt wird\t\n\tIn_rDivisor: REAL;\nEND_VAR\n","LineInfoPersistence":"(string)667553cd-d738-4a7f-b621-964481790992_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)49","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}